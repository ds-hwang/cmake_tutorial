#include <iostream>
#include <functional>

/* Define a template function */
template <typename T>
void printValue(T value) {
  std::cout << value << std::endl;
}

int main(void) {
  /* A function wrapper to a function */
  std::function<void(int)> funcA = printValue<int>;
  funcA(2015);

  /* A function wrapper to a function pointer */
  std::function<void(int)> funcB = &printValue<int>;
  funcB(2016);

  /* A function wapper to a lambda function. */
  std::function<void(int)> funcC = [](int value) {
    std::cout << value << std::endl;
  };
  funcC(2017);

  /* A function wrapper generated by std::bind().
   * Pass a pre-defined parameter when binding.
   */
  std::function<void(void)> funcD = std::bind(printValue<std::string>, "PI is");
  funcD();

  /* A function wrapper generated by std::bind().
   * Pass a parameter when calling the function.
   */
  std::function<void(float)> funcE =
      std::bind(printValue<float>, std::placeholders::_1);
  funcE(3.14159);
}
